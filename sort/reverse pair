Given an array of integers A, we call (i, j) an important reverse pair if i < j and A[i] > 2*A[j].
Return the number of important reverse pairs in the given array A.



Problem Constraints
1 <= length of the array <= 105

-2 * 109 <= A[i] <= 2 * 109



Input Format
The only argument given is the integer array A.



Output Format
Return the number of important reverse pairs in the given array A.



Example Input
Input 1:

 A = [1, 3, 2, 3, 1]
Input 2:

 A = [4, 1, 2]


Example Output
Output 1:

 2
Output 2:

 1


Example Explanation
Explanation 1:

 There are two pairs which are important reverse pair 
 i.e  (1, 4) => A[1] > 2 * A[4] => 3 > 2 * 1 => 3 > 2 and
      (3, 4) => A[3] > 2 * A[4] => 3 > 2 * 1 => 3 > 2.
Explanation 2:

 There is only one pair 
 i.e (0, 1) => A[0] > 2 * A[1] => 4 > 2 * 1 => 4 > 1






















import java.util.ArrayList;
//see help req
public class Solution {
    public static int ans = 0;

    public int solve(ArrayList<Integer> A) {
        ans = 0; // Reset ans before each call(coz code will run for multiple test case)
        mergesort(A, 0, A.size() - 1);
        return ans;
    }

    public void mergesort(ArrayList<Integer> A, int s, int e) {
        if (s >= e) return;

        int mid = (s + e) / 2;
        mergesort(A, s, mid);
        mergesort(A, mid + 1, e);
        int count = 0;
        int i = s;
        int j = mid + 1;

        merge(A, s, e, mid);
    }

    public void merge(ArrayList<Integer> A, int l, int r, int m) {
        int n1 = m - l + 1;
        int n2 = r - m;

        int[] L = new int[n1];
        int[] R = new int[n2];

        for (int i = 0; i < n1; ++i)
            L[i] = A.get(l + i);
        for (int j = 0; j < n2; ++j)
            R[j] = A.get(m + 1 + j);
           
        int i = 0, j = 0;
        int k = l;
                int i1 = 0, j1 = 0;
     while (i1 < n1 && j1 < n2) {
       
            if (L[i1] > (long)2*R[j1]) {
                ans += n1-i1;
                j1++;
                
            } else {

               
                i1++;
               
            }

        }



        while (i < n1 && j < n2) {
       
            if (L[i] <= R[j]) {
                A.set(k, L[i]);
                i++;
                
            } else {
                
                A.set(k, R[j]);

                j++;
               
            }

            k++;
        }

        while (i < n1) {
            A.set(k, L[i]);
            i++;
            k++;
        }

        while (j < n2) {
            A.set(k, R[j]);
            j++;
            k++;
        }
    }
}
