You are given an array A of length N and Q queries given by the 2D array B of size Q*2. Each query consists of two integers B[i][0] and B[i][1].
For every query, the task is to calculate the sum of all even indices in the range A[B[i][0]…B[i][1]].

Note : Use 0-based indexing


Problem Constraints
1 <= N <= 105
1 <= Q <= 105
1 <= A[i] <= 100
0 <= B[i][0] <= B[i][1] < N


Input Format
First argument A is an array of integers.
Second argument B is a 2D array of integers.


Output Format
Return an array of integers.


Example Input
Input 1:
A = [1, 2, 3, 4, 5]
B = [   [0,2] 
        [1,4]   ]
Input 2:
A = [2, 1, 8, 3, 9]
B = [   [0,3] 
        [2,4]   ]


Example Output
Output 1:
[4, 8]
Output 2:
[10, 17]
For Input 1:
The subarray for the first query is [1, 2, 3] whose sum of even indices is 4.
The subarray for the second query is [2, 3, 4, 5] whose sum of even indices is 8.
//////////////////
Create a prefix array pref[] where pref[i+1] will store the sum of numbers with even indices in the subarray A[0…i]. 
Now, the sum of numbers with even indices in the range [L, R] can be easily calculated in O(1) as pref[R + 1] – pref[L].

Time Complexity : O(N + Q)
Space Complexity : O(N + Q)
///////////////////
public class Solution {
    public int[] solve(int[] A, int[][] B) {
        int query = B.length;
        int[] res = new int[query];
        int k=0;
             int[] pfe = new int[A.length];
         pfe[0] = A[0];
            for(int i = 1;i<A.length;i++){
          if(i%2 != 0){
               pfe[i] = pfe[i-1];
          }else{
                  pfe[i] = pfe[i-1] + A[i];
          }
          
        }
        for(int i =0;i<query;i++){
            int s = B[i][0];
            int e = B[i][1];
            if(s != 0)
            res[k++] = pfe[e]-pfe[s-1]; 
            else{
                res[k++] = pfe[e];  
            }
        }
        return res;
    }

}
