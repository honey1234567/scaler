Given an array of size N, find the majority element. The majority element is the element that appears more than floor(n/2) times.
You may assume that the array is non-empty and the majority element always exists in the array.



Problem Constraints
1 <= N <= 5*105
1 <= num[i] <= 109


Input Format
Only argument is an integer array.


Output Format
Return an integer.


Example Input
Input 1:
[2, 1, 2]
Input 2:
[1, 1, 1]


Example Output
Input 1:
2
Input 2:
1


Example Explanation
For Input 1:
2 occurs 2 times which is greater than 3/2.
For Input 2:
 1 is the only element in the array, so it is majority
 //////////////////////
 Moores vote
 public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int majorityElement(final int[] A) {
        int c=0;
        int candidate = A[0];
        int n = A.length;
        for(int i =0;i<n;i++){
            if(candidate == A[i]){
                c++;
             
            
            }
               else if(c==0){
                    candidate = A[i];
                    c=1;
                }
            else{
                c--;
            }
        }
        if(c > 0){
            int f=0;
            for(int i =0;i<n;i++){
                if(A[i] == candidate){
                    f++;
                }
                if(f>n/2){
                    return candidate;
                }
            }
          
        }
          return 0;
    }
}
////////////////
If we cancel out each occurrence of an element X with all the other elements that are different from X, then X will exist till the end if it is a majority element.
Loop through each element and maintain a count of the element that has the potential of being the majority element.

If the next element is the same, then increments the count, otherwise decrements the count.
If the count reaches 0, then update the potential index to the current element and reset the count to 1.
