Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Note that all the operations have to be constant time operations.

Questions to ask the interviewer :

Q: What should getMin() do on empty stack? 
A: In this case, return -1.


Q: What should pop do on empty stack? 
A: In this case, nothing. 



Q: What should top() do on empty stack?
A: In this case, return -1
///////////////////////////////
class Solution {
     Stack<Pair> st = new Stack<>();
    public void push(int x) {
        if(st.isEmpty()){
            st.push(new Pair(x,x));
        }else{
            Pair top = st.peek();
            st.push(new Pair(x,Math.min(x,top.min))); 
        }
        
    }

    public void pop() {
           if(st.isEmpty()) return;
         st.pop();
    }

    public int top() {
        if(st.isEmpty()) return -1;
        return st.peek().element;
        
    }

    public int getMin() {
        if(st.isEmpty()) return -1;
          Pair top = st.peek();
          return top.min;
    }
    
}
class Pair{
    int element;
    int min;
    Pair(int e,int m){
        this.element = e;
        this.min = m;
    }
}
