Pairs with given sum II
Solved
feature icon
Get your doubts resolved blazing fast with Chat GPT Help
Check Chat GPT
feature icon
Using hints is now penalty free
Use Hint
Problem Description
Given a sorted array of integers (not necessarily distinct) A and an integer B, find and return how many pair of integers ( A[i], A[j] ) such that i != j have sum equal to B.

Since the number of such pairs can be very large, return number of such pairs modulo (109 + 7).



Problem Constraints
1 <= |A| <= 100000

1 <= A[i] <= 10^9

1 <= B <= 10^9



Input Format
The first argument given is the integer array A.

The second argument given is integer B.



Output Format
Return the number of pairs for which sum is equal to B modulo (10^9+7).



Example Input
Input 1:

A = [1, 1, 1]
B = 2
Input 2:

A = [1, 5, 7, 10]
B = 8


Example Output
Output 1:

 3
Output 2:

 1


Example Explanation
Explanation 1:

 The pairs of A[i] and A[j] which sum up to 2 are (0, 1), (0, 2) and (1, 2).
 There are 3 pairs.
Explanation 2:

 There is only one pair, such that i = 0, and j = 2 sums up to 8.
///////////////////////////
public class Solution {
    public int solve(int[] A, int B) {
        int n = A.length;
        int p1 = 0;
        int p2 = n-1;
        long count = 0;
        long mod = 1000000007;
       HashMap<Integer,Integer> hm=new HashMap<>();
       for(int i=0;i<n;i++){
           hm.put(A[i],hm.getOrDefault(A[i],0)+1);
       }
        while(p1 < p2){
            int sum = A[p1] + A[p2];
            if(sum > B){
                p2--;
            }
            else if(sum < B){
                p1++;
            }
            else{
                if(A[p1] == A[p2]){
                    //As array is sorted, this means we have same numbers between them and choosing any 2 will give the answer.
                    //Using formula of permutation comnbination to pick any 2
                    long x = p2-p1+1;
                    count += (x*(x-1)/2);
                    break;  
                }else{
                    int count1=hm.get(A[p1]);
                    int count2=hm.get(A[p2]);
                    // int temp1 = A[p1];
                    // int temp2 = A[p2];
                    // while(A[p1] == temp1){
                    //     count1++;
                    //     p1++;
                    // }

                    // while(A[p2] == temp2){
                    //     count2++;
                    //     p2--;
                    // }

                    count += (long)(count1*count2);
                    p1=p1+count1;
                    p2=p2-count2;
                }
            }
        }

        count %= mod;
        return (int)count;
    }
}

