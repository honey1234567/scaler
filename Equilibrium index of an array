You are given an array A of integers of size N.

Your task is to find the equilibrium index of the given array

The equilibrium index of an array is an index such that the sum of elements at lower indexes is equal to the sum of elements at higher indexes.

If there are no elements that are at lower indexes or at higher indexes, then the corresponding sum of elements is considered as 0.

Note:

Array indexing starts from 0.
If there is no equilibrium index then return -1.
If there are more than one equilibrium indexes then return the minimum index.


Problem Constraints
1 <= N <= 105
-105 <= A[i] <= 105


Input Format
First arugment is an array A .


Output Format
Return the equilibrium index of the given array. If no such index is found then return -1.


Example Input
Input 1:
A = [-7, 1, 5, 2, -4, 3, 0]
Input 2:

A = [1, 2, 3]


Example Output
Output 1:
3
Output 2:

-1

///////////////////
public class Solution {
    public int solve(int[] A) {
            int n = A.length;       
        for(int i = 1;i<n;i++){

          A[i] = A[i-1] + A[i];
        }
        for(int i = 0;i<n;i++){
           int leftsum = i != 0 ? A[i-1]:0;
          if(leftsum == A[n-1] - A[i]){
              return i;
          }
        }
        return -1;
    }
}

////////////////////////////
here if u check constarint N can be max-10^5 and each element is also 10^5 then sum can be at last index 10^10 which is out of int range 
so make prefix sum array of type long 
and leftsum and rightsum of type also long
THEIRS solution
public class Solution {
    public int solve(int[] A) {
        long sum1 = 0;  
        for(int i = 0; i < A.length ; i++) 
            sum1 += A[i];//initially all element sum
        long sum2 = 0;  // sum of elements at lower indexes
        int ans = Integer.MAX_VALUE;
        for(int i = 0 ; i < A.length ; i++){
            sum1 -= A[i];   // sum of elements at higher indexes
            //sum1 will act as right sum by keep on subtracting current element from starting
            if(sum1 == sum2){
                ans = i;
                break;
            }
            sum2 += A[i];//sum 2 is leftsum after index 'i' coz it's being updated at last after 
            //condition checking so that it can be updated for next iteration
        }
        if(ans == Integer.MAX_VALUE)
            ans =- 1;   // If no equilibrium index found, then return -1
        return ans;
    }
}
