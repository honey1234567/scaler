public class Solution {
        public class TrieNode {
        Character data;
        TrieNode[] children;
        boolean eow;

        TrieNode(Character ch) {
            data = ch;
            children = new TrieNode[26];
            eow = false;
        }
    }
    public String solve(String[] A, String[] B) {
                TrieNode root = inserAll(A);
                      StringBuilder sb = new StringBuilder();
        for(int i=0;i<B.length;i++){
            sb.append(search(B[i],0,root,0)==true?1:0);
        }
        return sb.toString();
    }
        public TrieNode inserAll(String[] A){
        TrieNode root = new TrieNode('0');
        for(String s:A){
            int len = s.length();
                 TrieNode curr =root;
            for(int i=0;i<len;i++){
           
                Character ch = s.charAt(i);
                if(curr.children[ch-'a'] == null){
                   curr.children[ch-'a']=new TrieNode(ch);
                }
                curr= curr.children[ch-'a'];

            }
            curr.eow=true;
        }
        return root;
    }
     public boolean search(String s,int idx ,TrieNode root,int flag){
         int n=s.length();
         boolean ans=false;

         if(idx==n){
         if(flag ==1 && root.eow==true) return true;
         return false;
         }
         char ch = s.charAt(idx);
         if(flag ==0){
             for(TrieNode c:root.children){
                 if(c != null && c.data==ch ){
                     ans = ans || search(s,idx+1,c,0);
                 }else if(c != null ){
                     ans = ans || search(s,idx+1,c,1);
                 }
                 if(ans==true) return ans;//new line added to directly return and not call next child
             }
         }else{
             TrieNode t =root.children[ch-'a'];
             if(t != null)
             ans = ans || search(s,idx+1,t,1);
         }
         return ans;
         
     }
}
