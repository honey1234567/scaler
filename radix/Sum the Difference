Given an integer array, A of size N.
You have to find all possible non-empty subsequences of the array of numbers and then,
for each subsequence, find the difference between the largest and smallest number in that subsequence.
Then add up all the differences to get the number.

As the number may be large, output the number modulo 1e9 + 7 (1000000007).

NOTE: Subsequence can be non-contiguous.



Problem Constraints
1 <= N <= 10000

1<= A[i] <=1000



Input Format
First argument is an integer array A.



Output Format
Return an integer denoting the output.



Example Input
Input 1:

A = [1, 2] 
Input 2:

A = [3, 5, 10]


Example Output
Output 1:

 1 
Output 2:

 21


Example Explanation
Explanation 1:

All possible non-empty subsets are:
[1]     largest-smallest = 1 - 1 = 0
[2]     largest-smallest = 2 - 2 = 0
[1, 2]  largest-smallest = 2 - 1 = 1
Sum of the differences = 0 + 0 + 1 = 1
So, the resultant number is 1 
Explanation 2:

All possible non-empty subsets are:
[3]         largest-smallest = 3 - 3 = 0
[5]         largest-smallest = 5 - 5 = 0
[10]        largest-smallest = 10 - 10 = 0
[3, 5]      largest-smallest = 5 - 3 = 2
[3, 10]     largest-smallest = 10 - 3 = 7
[5, 10]     largest-smallest = 10 - 5 = 5
[3, 5, 10]  largest-smallest = 10 - 3 = 7
Sum of the differences = 0 + 0 + 0 + 2 + 7 + 5 + 7 = 21
So, the resultant number is 21 
///////////////////////////////////////////////////
After sorting the array, for every element,
number of subsets where arr[i] is the smallest element = 2^i
number of subsets where arr[i] is the largest element = 2^(N-i-1)

So, contribution of arr[i] in our ans = arr[i] * (2^(N-i-1) - 2^i)

But, be careful, these values can be really large -

2^(N-i-1) : To calculate this you need to take modulo at every step of multiplication

2^i : To calculate this you need to take modulo at every step of multiplication


And also while calculating the final answer, take modulo at every step.
///////////////////////////////////////////////////////////////////////////////////
public class Solution {
    public int solve(ArrayList<Integer> A) {
        //So, contribution of arr[i] in our ans = arr[i] * (2^(N-i-1) - 2^i)
        Collections.sort(A);
        int n=A.size();
        long max=0,min=0;
        int mod=(int)1e9+7;
        for(int i=0;i<n;i++){
            max=(max%mod + (A.get(i)%mod*fastexp(2,i,mod)%mod)%mod)%mod;
            min=(min%mod + (A.get(i)%mod*fastexp(2,n-i-1,mod)%mod)%mod)%mod;
        }
        return (int)(max%mod-min%mod+mod)%mod;
    }
    public long fastexp(int a,int p,int m){
        if(p==0) return 1;
        if(p==1) return a;
        long p1=fastexp(a,p/2,m)%m;
        if(p%2==0) return (p1%m*p1%m)%m;
        return (p1%m*p1%m*a%m)%m;
    }
}
