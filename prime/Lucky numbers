A lucky number is a number that has exactly 2 distinct prime divisors.

You are given a number A, and you need to determine the count of lucky numbers between the range 1 to A (both inclusive).



Problem Constraints
1 <= A <= 50000



Input Format
The first and only argument is an integer A.



Output Format
Return an integer i.e the count of lucky numbers between 1 and A, both inclusive.



Example Input
Input 1:

 A = 8
Input 2:

 A = 12


Example Output
Output 1:

 1
Output 2:

 3


Example Explanation
Explanation 1:

 Between [1, 8] there is only 1 lucky number i.e 6.
 6 has 2 distinct prime factors i.e 2 and 3.
Explanation 2:

 Between [1, 12] there are 3 lucky number: 6, 10 and 12.
//////////////////////////////////////////////////////////////////////////////////////////
public class Solution {
    public int solve(int A) {
    
       


      //create spf array
        int spf[] = new int[A+1];
        for(int i=2;i<=A;i++){
          if(spf[i]==0) spf[i]=i;
            if(spf[i]==i){
           for(int j=i*2;j<=A;j += i){
               
               spf[j]=i;
           }
            }
       
        }
      //ArrayList<Integer> ans = new  ArrayList<Integer>();
      int total=0;
      for(int val=1;val<=A;val++){
          int t=1;
           int distinct=0;
           int val1=val;
           int f=0;
          while(val1 != 1){
              int c=0;
              
              int p=spf[val1];
             
              while(val1%p==0){
               //  if(c==1) break;
                  c++;
                  
                  val1=val1/p;
              }
             f++;
             if(f>2) break;
             t *= (c+1);
          }
          if(f==2) 
          total +=1;
      }
       
        
        return total;
    }
}
