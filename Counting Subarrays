Given an array A of N non-negative numbers and a non-negative number B,
you need to find the number of subarrays in A with a sum less than B.
We may assume that there is no overflow.

The constraints are small. Have you tried doing just what the question says?
Since the constraints are small we can generate all subarrays using 2 loops. This can be done in O(N^2). Then find the sum of each subarray and if the sum is less than B we add 1 to our answer.
Note that we cannot iterate over the subarray after generating the left index and right index to find the sum as this will increase the time complexity of the solution to O(N^3). We can find the sum of each subarray in O(1) with the help of a prefix sum array, which takes an O(N) precomputation.
Please refer to the complete solution for implementation.



THEIRS
ublic class Solution {
    public int solve(int[] A, int B) {
        int n  = A.length;
        int pref[] = new int[n];
        pref[0]=A[0];
        int ans=0;
        for(int i=1;i<n;i++)pref[i]=pref[i-1]+A[i];
        for(int i=0;i<n;i++){
            for (int j=i;j<n;j++){
                int sum = pref[j];
                if(i>0){
                    sum -= pref[i-1];
                }
                if(sum < B) ans++;
            }
        }
        return ans;
    }
    
    
    MINE
    //carry forwad-n square time complexity
public class Solution {
    public int solve(int[] A, int B) {
        int count = 0;
              for(int s=0;s<=A.length-1;s++){
                  int sum = 0;
         for(int e=s;e<=A.length-1;e++){
            sum += A[e];
            if(sum < B){
               count++;
            }
      } 
      }
      return count;
    }
}

}


MINE
//carry forwad-n square time complexity
public class Solution {
    public int solve(int[] A, int B) {
        int count = 0;
              for(int s=0;s<=A.length-1;s++){
                  int sum = 0;
         for(int e=s;e<=A.length-1;e++){
            sum += A[e];
            if(sum < B){
               count++;
            }
      } 
      }
      return count;
    }
}
