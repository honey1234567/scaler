For every A[i], we calculate no of elements A[j] 
such that A[j] < A[i] and j < i. 
Similary, we also calculate the no of elements A[j]
such that A[j] > A[i] and  j > i.
Now, the number of triplets with A[i] as the centre is the
product of the above two calculated values. 
We can get this count for all the elements and add their total.

Time Complexity : O(N^2)
Space Complexity : O(1)
//////////////////////////////////////////////
Problem Description
You are given an array A of N elements. Find the number of triplets i,j and k such that i<j<k and A[i]<A[j]<A[k]


Problem Constraints
1 <= N <= 103
1 <= A[i] <= 109


Input Format
First argument A is an array of integers.


Output Format
Return an integer.


Example Input
Input 1:
A = [1, 2, 4, 3]
Input 2:
A = [2, 1, 2, 3]


Example Output
Output 1:
2
Output 2:
1


Example Explanation
For Input 1:
The triplets that satisfy the conditions are [1, 2, 3] and [1, 2, 4].
For Input 2:
 
The triplet that satisfy the conditions is [1, 2, 3].
////////////////////////////////////////////////////////////////////////////////////
  public class Solution {
    public int solve(int[] A) {
        int n= A.length;
        int triplet=0;
        for(int i=0;i<n;i++){
                int l=0;
                for(int j = i-1;j>=0;j--){
                    if(A[j]<A[i]) l++;
                }
                  int r=0;
                for(int j = i+1;j<n;j++){
                    if(A[j]>A[i]) r++;
                }
                if(l !=0 && r != 0)
                triplet += l*r;
        }
        return triplet;
    }
}
