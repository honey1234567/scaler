In a carpentry shop, there are <strong>N</strong> wooden boards of various lengths. You are given an integer array 
<strong>A</strong> of length <strong>N</strong>, where <strong>A[i]</strong> represents the length of the <strong>i-th</strong>
board.<br><br>You can join any two boards of lengths<strong> x</strong> and <strong>y</strong> 
into one board by paying a cost of <strong>x + y</strong>. You must join all the boards until there is only one board remaining.
<br><br>Return the minimum cost of joining all the given boards into one board.</div>

public class Solution {
    public long solve(int[] A) {
        
        //overfolow issue take care else some etst case will not be submitted and u also wont be getting hint while submitting so take care 
        //when constraint are large in question statement.
        PriorityQueue<Long> pq = new PriorityQueue<>();
        //if(A.length == 1) return 0L;
        for(int i=0;i<A.length;i++){
            pq.add((long)A[i]);
        }
        
        long c = 0;
        while(pq.size()>1){
            long f = pq.poll();
            long s = pq.poll();
        
            c =c +  (long)(f+s);
                pq.add((long)(f+s));
        }
        return c;
    }
}
