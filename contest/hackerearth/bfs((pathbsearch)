//take maxnodes to initailaize al
import java.util.*;
class TestClass {
    public static void main(String args[] ) throws Exception {
        /* Sample code to perform I/O:
         * Use either of these methods for input

        //BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String name = br.readLine();                // Reading input from STDIN
        System.out.println("Hi, " + name + ".");    // Writing output to STDOUT

        //Scanner
        Scanner s = new Scanner(System.in);
        String name = s.nextLine();                 // Reading input from STDIN
        System.out.println("Hi, " + name + ".");    // Writing output to STDOUT

        */

        // Write your code here
                int n;
       Scanner sc =  new Scanner(System.in);
       n=sc.nextInt();//no of nodes
       ArrayList<ArrayList<Integer>> al = new ArrayList<>();
       int max = Integer.MIN_VALUE;
       for(int i=1;i<=n;i++){
         int v = sc.nextInt();
        
         max= Math.max(max,v);
         }
         for(int i=0;i<=max;i++){
             al.add(new ArrayList<Integer>());
         }
         int e = sc.nextInt();
         for(int i=0;i<e;i++){
            int u = sc.nextInt();
            int v = sc.nextInt();
             al.get(u).add(v);
         }
         int a = sc.nextInt();
         int b = sc.nextInt();
         int[] vis = new int[max+1];
        boolean f =  dfs(vis,a,b,al);
        System.out.println(f?1:0);

    }
    public static  boolean dfs(int[] vis,int a,int b, ArrayList<ArrayList<Integer>> adj){
           vis[a] = 1;
           for(int n : adj.get(a)){
            if(vis[n] == 0){
                if(n==b) return true;
                 dfs(vis,n,b,adj);
            } 
           }
           return false;
    }
}
