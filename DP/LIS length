You are given an array A. You need to find the length of the Longest Increasing Subsequence in the array.

In other words, you need to find a subsequence of array A in which the elements are in sorted order, (strictly increasing) and as long as possible.



Problem Constraints
1 ≤ length(A), A[i] ≤ 105



Input Format
The first and only argument of the input is the array A.



Output Format
Output a single integer, the length of the longest increasing subsequence in array A.



Example Input
Input 1:

A: [2, 1, 4, 3]
Input 2:

A: [5, 6, 3, 7, 9]


Example Output
Output 1:

2
Output 2:

4


Example Explanation
Explanation 1:

 [2, 4] and [1, 3] are the longest increasing sequences of size 2. 
Explanation 2:

The longest increasing subsequence we can get is [5, 6, 7, 9] of size 4.
//////////////////////////////////////////////
public class Solution {
    public int findLIS(int[] A) {
       int[] temp = new int[A.length +1];
       int n = A.length;
       temp[0] = A[0];
       int k=0;
       for(int i=1;i<n;i++){
           if(A[i]<temp[k]){
               int ubi = bs(A[i],temp,0,k);
               temp[ubi] = A[i];
               
           }else if(A[i]>temp[k]){//strictly increasing
               k=k+1;
               temp[k] = A[i];
              
           }
       }
    //    for(int i=0;i<temp.length;i++){
    //        System.out.println(temp[i]);
    //    }
       return k+1;
    }
    public int bs(int tar,int[] temp,int lo,int hi){
        int ans = 0;
        while(lo<=hi){
            int mid = lo+(hi-lo)/2;
            if(temp[mid]<tar){
                lo=mid+1;
            }else{
                ans = mid;
                hi=mid-1;
            }
        }
        return ans;
    }
}

./////////////////////////////////////////////////
