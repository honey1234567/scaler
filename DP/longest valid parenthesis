 Longest valid Parentheses

Problem Description
Given a string A containing just the characters '(' and ')'.

Find the length of the longest valid (well-formed) parentheses substring.



Problem Constraints
1 <= length(A) <= 750000



Input Format
The only argument given is string A.



Output Format
Return the length of the longest valid (well-formed) parentheses substring.



Example Input
Input 1:

 A = "(()"
Input 2:

 A = ")()())"


Example Output
Output 1:

 2
Output 2:

 4


Example Explanation
Explanation 1:

 The longest valid parentheses substring is "()", which has length = 2.
Explanation 2:

 The longest valid parentheses substring is "()()", which has length = 4.
/////////////////////////Idea1 1///////////////////////////////
public class Solution { 
    public int longestValidParentheses(String A) {
        //https://youtu.be/qC5DGX0CPFA
              Map<Character, Character> map = new HashMap<>();
        map.put(')','('); map.put(']','['); map.put('}','{');
        int n = A.length();
        int[] dp = new int[n];
        for(int i=1; i<n; i++) {
            char curr = A.charAt(i);
            if(!map.containsKey(curr)) dp[i]=0;
            else {
                if(i-1>=0 && A.charAt(i-1)==map.get(curr)) {
                    dp[i] = (i-2>=0) ? dp[i-2]+2 : 2;
                }else if(i-1>=0 && i-dp[i-1]-1>=0 && A.charAt(i-dp[i-1]-1)==map.get(curr)) {
                    dp[i] = (i-dp[i-1]-2>=0) ? dp[i-1]+2+dp[i-dp[i-1]-2] : dp[i-1]+2;
                }else dp[i] = 0;
            }
        }
        int max = 0;
        for(int i=0; i<n; i++) {
            max = Math.max(dp[i],max);
        }
        return max;
}
}

    


//////////////////////idea2-kadanes////////////////////////////////
public class Solution { 
    public int longestValidParentheses(String A) {
    int n = A.length();
        int[] dp = new int[n];
         int left = 0, right = 0, maxlength = 0;
 
// Variables for left and right counter.
    // maxlength to store the maximum length found so far

 
    // Iterating the string from left to right
    for (int i = 0; i < n; i++) 
    {
        // If "(" is encountered,
        // then left counter is incremented
        // else right counter is incremented
        if (A.charAt(i) == '(')
            left++;
        else
            right++;
 
        // Whenever left is equal to right, it signifies
        // that the subsequence is valid and
        if (left == right)
            maxlength = Math.max(maxlength, 2 * right);
 
        // Resetting the counters when the subsequence
        // becomes invalid
        else if (right > left)
            left = right = 0;
    }
 
    left = right = 0;
 
    // Iterating the string from right to left
    for (int i = n - 1; i >= 0; i--) {
 
        // If "(" is encountered,
        // then left counter is incremented
        // else right counter is incremented
        if (A.charAt(i) == '(')
            left++;
        else
            right++;
 
        // Whenever left is equal to right, it signifies
        // that the subsequence is valid and
        if (left == right)
            maxlength = Math.max(maxlength, 2 * left);
 
        // Resetting the counters when the subsequence
        // becomes invalid
        else if (left > right)
            left = right = 0;
    }
    return maxlength;
}
}

    

