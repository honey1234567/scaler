You are given an array A of N integers and three integers B, C, and D.

You have to find the maximum value of A[i]*B + A[j]*C + A[k]*D, where 1 <= i <= j <= k <= N.
///////////////////////////

variable
public class Solution {
    public int solve(int[] A, int B, int C, int D) {

    int maxf = Integer.MIN_VALUE;
    int maxs = Integer.MIN_VALUE;
    int maxt = Integer.MIN_VALUE;
    

    for(int i=0; i<A.length; i++) {
    maxf = Math.max(maxf, A[i]*B);
    maxs = Math.max(maxs, A[i]*C*maxf); 
    maxt = Math.max(maxt, A[i]*D*maxt);
}

return maxt;

 }

}
/////////////////////////////////////////////////////
DP
public class Solution {
  public int solve(int[] A, int B, int C, int D) {
    int n = A.length;
    int[][] dp = new int[n + 1][3]; // dp array to store answer of previous states

    for (int i = 0; i <= n; i += 1) {
      dp[i][0] = dp[i][1] = dp[i][2] = -1000000000; // Initialize the dp array with minus infinity
    }

    for (int i = 1; i <= n; i += 1) {
      dp[i][0] = Math.max(dp[i - 1][0], A[i - 1] * B); // Maximum value of A[i]*B
      dp[i][1] = Math.max(dp[i - 1][1], dp[i][0] + A[i - 1] * C); // Maximum value of A[i]*B + A[j]*C
      dp[i][2] = Math.max(dp[i - 1][2], dp[i][1] + A[i - 1] * D); // Maximum value of A[i]*B + A[j]*C + A[k]*D
    }

    return dp[n][2]; // return the answer.
  }
}
///////////////////////////////////
