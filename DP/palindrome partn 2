public class Solution {
    public int minCut(String A) {
        int n=A.length();
        return f(0, n, A);

    }
        public int f(int i, int n, String str) {
        // Base case:
        if (i == n) return -1;

        int minCost = Integer.MAX_VALUE;
        // String[i...j]
        for (int j = i; j < n; j++) {
            if (isPalindrome(i, j, str)) {
                int cost = 1 + f(j + 1, n, str);
                minCost = Math.min(minCost, cost);
            }
        }
        return minCost;
    }
        public boolean isPalindrome(int i, int j, String s) {
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) return false;
            i++;
            j--;
        }
        return true;
    }
   
}
////////////////////DP//////////////////////////
public class Solution {
    public int minCut(String A) {
        int n=A.length();
                int[] dp = new int[n+1];
        Arrays.fill(dp, -1);
        return f(0, n, A, dp);

    }
        public int f(int i, int n, String str,int[] dp) {
        // Base case:
        if (i == n) return -1;
          if (dp[i] != -1) return dp[i];
        int minCost = Integer.MAX_VALUE;
        // String[i...j]
        for (int j = i; j < n; j++) {
            if (isPalindrome(i, j, str)) {
                int cost = 1 + f(j + 1, n, str, dp);
                minCost = Math.min(minCost, cost);
            }
        }
        return dp[i] = minCost;
    }
        public boolean isPalindrome(int i, int j, String s) {
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) return false;
            i++;
            j--;
        }
        return true;
    }
   
}

