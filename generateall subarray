You are given an array A of N integers.
Return a 2D array consisting of all the subarrays of the array

Note : The order of the subarrays in the resulting 2D array does not matter.


Problem Constraints
1 <= N <= 100
1 <= A[i] <= 105


Input Format
First argument A is an array of integers.


Output Format
Return a 2D array of integers in any order.


Example Input
Input 1:
A = [1, 2, 3]
Input 2:
A = [5, 2, 1, 4]


Example Output
Output 1:
[[1], [1, 2], [1, 2, 3], [2], [2, 3], [3]]
Output 2:
[[1 ], [1 4 ], [2 ], [2 1 ], [2 1 4 ], [4 ], [5 ], [5 2 ], [5 2 1 ], [5 2 1 4 ] ]


Example Explanation
For Input 1:
All the subarrays of the array are returned. There are a total of 6 subarrays.
For Input 2:
All the subarrays of the array are returned. There are a total of 10 subarrays.












public class Solution {
    public int[][] solve(int[] A) {
      ArrayList<ArrayList<Integer>> l = new ArrayList<>();
      for(int s=0;s<=A.length-1;s++){
         for(int e=s;e<=A.length-1;e++){
             ArrayList<Integer> l1 = new ArrayList<>();
           for(int k=s;k<=e;k++){
          l1.add(A[k]);
      } 
      l.add(l1);
      } 
      }
      int arr[][] = new int[l.size()][]; 
      int i = 0;
        for (List<Integer> l2: l) {
            int k = 0;
            int[] res = new int[l2.size()];
            for (Integer l3: l2){
             res[k++] = l3;
            }
            arr[i++] = res;
        }
        return arr;
    }
}
