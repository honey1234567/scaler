1)  Matrix Subtraction
A = [[1, 1]]
 
B = [[2, 3]] 
output
[[-1, -2]]

public class Solution {
    public int[][] solve(int[][] A, int[][] B) {
         for(int i = 0;i<A.length;i++){
            for(int j =0;j<A[0].length;j++){
                A[i][j] -= B[i][j];
               
            }
        }
        return A;
    }
}
/////////////THEIRS-TC=SC=N * M
public class Solution {
    public int[][] solve(int[][] A, int[][] B) {
        int N = A.length;
        int M = A[0].length;
    
        int[][] C = new int[N][M];
        // Iterating over the rows
        for (int i = 0; i < N;i++){
            // Iterating over the columns
            for (int j = 0; j < M;j++){
                C[i][j] = A[i][j] - B[i][j];
            }
        }
    
        return C;
    }
}
2) Add matrices
public class Solution {
    public int[][] solve(int[][] A, int[][] B) {
        
         for(int i = 0;i<A.length;i++){
            for(int j =0;j<A[0].length;j++){
                A[i][j] += B[i][j];
               
            }
        }
        return A;
    }
}
3) Are matrices same
public class Solution {
    public int solve(int[][] A, int[][] B) {
        for(int i = 0;i<A.length;i++){
            for(int j =0;j<A[0].length;j++){
               if(A[i][j] != B[i][j]){
                   return 0;
               }
            }
        }
        return 1;
    }
}
4) Matrix Scalar Product
public class Solution {
    public int[][] solve(int[][] A, int B) {
        for(int i = 0;i<A.length;i++){
            for(int j =0;j<A[0].length;j++){
                A[i][j] *= B;
            }
        }
        return A;
    }
}
