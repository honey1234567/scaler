You are given an array A of N elements. Sort the given array in increasing order of number of distinct factors of each element, i.e., element having the least number of factors should be the first to be displayed and the number having highest number of factors should be the last one. If 2 elements have same number of factors, then number with less value should come first.

Note: You cannot use any extra space

First argument A is an array of integers.


Output Format
Return an array of integers.


Example Input
Input 1:
A = [6, 8, 9]
Input 2:
A = [2, 4, 7]


Example Output
Output 1:
[9, 6, 8]
Output 2:
[2, 7, 4]


Example Explanation
For Input 1:
The number 9 has 3 factors, 6 has 4 factors and 8 has 4 factors.
For Input 2:
The number 2 has 2 factors, 7 has 2 factors and 4 has 3 factors.

public class Solution {
    public int[] solve(int[] A) {
        int n = A.length;
        // need to convert int to integer obejct because Arrays sort and collection sort works on object
        // here we will use Arrays sort
        Integer res[] = new Integer[n];
        for(int i = 0; i < A.length; i++) {
            res[i] = A[i];
        }
          Arrays.sort(res, new Comparator<Integer>() {
            @Override
            public int compare(Integer a, Integer b) {
                int cfa = countFactor(a);
                int cfb = countFactor(b);
                if(cfa>cfb){
                    return 1;
                } else if(cfa<cfb){
                    return -1;
                } else{
              if(a<b) return -1;
              else if(a>b) return 1;
              else return 0;
                }
            }
        });
        // copy back to A
        for(int i = 0; i < A.length; i++) {
            A[i] = res[i];
        }
        return A;
 
    }
        public int countFactor(int number)
    {
        int count = 0;
        int sqrt = (int) Math.sqrt(number);
        for(int i=1;i<=sqrt;i++)
        {
            if(number % i ==0)
                count = count + 2;
        }
        if (sqrt * sqrt == number)
        {
            count--;
        }
        return count;
    }
}
////////////////////////////THEIRS////////////////////////
public int compare(Integer val1, Integer val2) {
                Integer count1 = countFactors(val1);
                Integer count2 = countFactors(val2);
                if(count1 == count2){
                    return val1 - val2;
                }
                return count1 - count2;//increasing order
            }    
        });
