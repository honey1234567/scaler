It is important to note that if at a given time, you have 3 distinct element from the array, if you remove them from the array, your answer does not change.

Assume that we maintain 2 elements’ counts as we traverse along the array.

When we encounter a new element, there are 3 cases possible :

We don’t have 2 elements yet. So add this to the list with count as 1.

This element is different from the existing 2 elements. As we said before, we have 3 distinct numbers now. Removing them does not change the answer. So decrement 1 from count of 2 existing elements. If their count falls to 0, obviously its not a part of 2 elements anymore.

The new element is same as one of the 2 elements. Increment the count of that element.

Consequently, the answer will be one of the 2 elements left behind. If they are not the answer, there is no element with count > N / 3.
/////////////////////
public class Solution {
	// DO NOT MODIFY THE LIST
	public int repeatedNumber(final List<Integer> a) {
         int c1=0;
        int f = Integer.MIN_VALUE;
        int sec = Integer.MIN_VALUE;
        int c2= 0;
        int n = a.size();
        for(int i =0;i<n;i++){
        if(a.get(i) == f){
          c1++;  
        }else if(a.get(i) == sec){
            c2++;
        }else if(c1==0){
            c1=1;
            f = a.get(i);
        }else if(c2 == 0){
            c2=1;
            sec = a.get(i);
        }else{
            c1--;
            c2--;
        }
    }
        if(c1 > 0){
            int fr=0;
            for(int i =0;i<n;i++){
                if(a.get(i) == f){
                    fr++;
                }
                if(fr>n/3){
                    return f;
                }
            }
          
        }
         if(c2 > 0){
            int fr=0;
            for(int i =0;i<n;i++){
                if(a.get(i) == sec){
                    fr++;
                }
                if(fr>n/3){
                    return sec;
                }
            }
          
        }
          return -1;
	}
}
