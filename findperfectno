You are given an integer A. You have to tell whether it is a perfect number or not.

Perfect number is a positive integer which is equal to the sum of its proper positive divisors.

A proper divisor of a natural number is the divisor that is strictly less than the number.



Problem Constraints
1 <= A <= 106



Input Format
First and only argument contains a single positive integer A.



Output Format
Return 1 if A is a perfect number and 0 otherwise.



Example Input
Input 1:

A = 4
Input 2:

A = 6


Example Output
Output 1:

0 
Output 2:

1 


Example Explanation
Explanation 1:

For A = 4, the sum of its proper divisors = 1 + 2 = 3, is not equal to 4.
Explanation 2:

For A = 6, the sum of its proper divisors = 1 + 2 + 3 = 6, is equal to 6. 

The simplest solution would be to loop through all the numbers from 1 to A. 
If it divides A then it is a factor of A.
Find all such numbers which are less than A and take its sum.

The solution can be optimised even furthur. If A is divisible by i, then i and A/i both are factors of A.
The intended solution is in O(sqrt(A)).

To check if a number is perfect number or not, you can find all the factors of that number and check if their sum (excluding the number itself as a factor) is equal to the number itself or not.

To do that iterate from 1 to sqrt(A).
Lets say A is divisible by i, then i and A/i are factors of A.
The only thing left is to check i and A/i are not same and none of them is equal to A.
Finally take their sum.

Time Complexity : O(âˆšA) Space Complexity : O(1)

Theirs
public class Solution {
    public int solve(int A) {
        if(A == 1){
            return 0;
        }
        int sum = 1;
        for (int j = 2; j * j <= A;j++){
            if(A % j == 0){
                sum += j;
				if(j != A / j){
					sum += A / j;
				}
            }
        }
        if(sum == A){
            return 1;
        }
        return 0;
    }
}


MINE
public class Solution {
    public int solve(int A) {
        int[] div = countfactor(A);
        int sum = 0;
        for(int i=0; i < div.length;i++){
           
       sum += div[i];
        }
        if(sum == A) return 1;
        else return 0;
    }
     public int[] countfactor(int A) {
        List<Integer> list  = new ArrayList<>();
        for(int i =1;i<=A;i++){
            if(A%i == 0 && i<= A/i){
              if(i== A/i && A!= 1){
                  list.add(i);
              }if(i < A/i){
                 list.add(i);
                   if(A/i != A)
                 list.add(A/i);
              }
            }else if(i > A/i){
                break;
            }
        }
        int[] res = new int[list.size()];
        int j = 0;
        Iterator i = list.iterator();
        while(i.hasNext()){
          
            res[j++] = (int)i.next();
        }
        return res;
    }
}
